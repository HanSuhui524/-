코딩애플 JavaScript 입문과 웹 UI개발_Level 2-2

♣코드 3줄로 캐러셀 (이미지 슬라이드) 만들기
one-way 애니메이션 들어있는 ui만들기
1. 시작화면 만들기
2. 최종화면 만들기
3. 원할때 최종화면으로 변하게 js
4. transition: all 1s;추가

버튼 1,2,3 눌렀을때 사진1,2,3 각각 보여주기.
      <script>
        $('.slide-1').on('click', function() { //1번 사진 보여주세요
          $('.slide-container').css('transform', 'translateX(0vw)');
        })
        $('.slide-2').on('click', function() { //2번 사진 보여주세요
          $('.slide-container').css('transform', 'translateX(-100vw)');
        })
        $('.slide-3').on('click', function() { //3번 사진 보여주세요
          $('.slide-container').css('transform', 'translateX(-200vw)');
        })
      </script>
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
♣코드 3줄로 캐러셀 (이미지 슬라이드) 만들기2
다음 버튼 만들기 . if
=다음 버튼 누르면
지금 보이는 사진이 1이면 2번 사진 보여주세요
지금 보이는 사진이 2이면 3번 사진 보여주세요

        var 지금사진 = 1;

        $('.next').on('click', function() {
          if(지금사진 == 1) {
          $('.slide-container').css('transform', 'translateX(-100vw)');
        
          }
        });
----------------------------------------------------
★★다음 버튼 이전 버튼!
        var 지금사진 = 1;
//다음 버튼
        $('.next').on('click', function() {
          if(지금사진 == 1) {
          $('.slide-container').css('transform', 'translateX(-100vw)');
          지금사진 +=1;  
        } else if(지금사진 == 2) {
            $('.slide-container').css('transform', 'translateX(-200vw)');
            지금사진 +=1;  
          }
        });
//이전 버튼
        $('.before').on('click', function() {
          if(지금사진 == 3) {
          $('.slide-container').css('transform', 'translateX(-100vw)');
          지금사진 -=1;  
        } else if(지금사진 == 2) {
            $('.slide-container').css('transform', 'translateX(0vw)');
            지금사진 -=1;  
          }
        });
--------------------------------------------
잘 보면 다음버튼 누를 때
if 지금사진이 1이면 -100vw 이동
if 지금사진이 2면 -200vw 이동
if 지금사진이 3이면 -300vw 이동
이렇게 코드짜고 있지 않습니까. 뭔가 규칙이 보이는데요 
그럼 애초에 if문 필요없이
다음버튼 누르면 'translateX(-지금사진vw)' 만큼 이동해주세요~ 라고 코드한줄 짜면 끝일듯요 
★★정답=
        var 지금사진 = 1;
        $('.next').on('click', function() {
        지금사진 ++;
        $('.slide-container').css('transform', 'translateX(-'+(지금사진-1)+'00vw)')
        });

        $('.before').on('click', function(){
        지금사진 --;
        $('.slide-container').css('transform', 'translateX(-'+(지금사진-1)+'00vw)')
                })

★★ 승민님 팁=
`translateX(${(현재사진 - 1) * 100}vw)`
---------------------------------------------------------
지금 사진에서
다음 버튼 누르면
다음 사진 넘어가고
사진 갯수 초과는 안되게

이전 버튼 누르면 
이전 사진 넘어가고
사진 갯수 미만은 안되게
        var 지금사진 = 1;
        $('.next').on('click', function() {
        지금사진 ++;
        if(지금사진<5) {
          $('.slide-container').css('transform', 'translateX(-'+(지금사진-1)+'00vw)')
        } else {
          지금사진 =4;
        }
        });

        $('.before').on('click', function(){
        지금사진 --;
        if(1<지금사진<3) {
        $('.slide-container').css('transform', 'translateX(-'+(지금사진-1)+'00vw)')
        }  else {
          지금사진 =0;
        }
        });
★★★규리님 정답은 사진 파일
승민님ㅇ ㅣ알려준 ${} 리터럴
얕은 복사, 깊은 복사
...배열명 = 배열 []괄호 벗김
{...객체명} = 객체 {} 벗기지만 , 그걸 다시 좌측처럼 객체 괄호{} 다시 감싸야되

★★★★★★★★★★★★★★★★★★
'trans;ateX(' + (현재사진-1) * -100 + 'vw)';
이것을 리터럴 쉽게 변환하면 'translateX(${(현재사진-1)* -100}vw)';
' + (현재사진-1) * -100 + ' 이 부분이 ${(현재사진-1)* -100} 으로 변함
★★★★★★★★★★★★★★★★★★
let obj1 = [ 1,2,3]; //배열 [] 안에 든거
console.log(...obj1); // 1,2,3 이되서 ...은 배열 []괄호를 벗겨버린다.
★★★★★★★★★★★★★★★★★★
let obj1 = { 1,2,3}; // 객체 {}안에 든거
let obj2 = { ...obj1}; // {1,2,3} 나온다. 객체는 괄호 못벗기지만 벗겨도 벗긴놈을 {}객체 안에 다시 넣으면 가능... 이것은 ★★★얕은 복사
승민님 영상 다시 봐봐

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
♣함수의 return 문법 & 소수점 다루기 = vs코드 파일 없.
함수 function 문법>
- 긴 코드 짧게 축약해서 쓸 수 있음
- 파라미터로 기능업그레이드도 가능
- 오늘 배울 return을 쓰면 함수를 쓰고나서 원하는 값을 그 자리에 퉤 뱉을 수도 있습니다. 
 return을 만나면 함수가 바로 종료
--------------------------------------
function 함수(){
  return 123
}
console.log(함수());  //123
그래서 진짜인지 확인하기 위해 함수() 실행하고나서 123을 남기라고 적었습니다.
 -------------------------------------
프로그래밍의 함수문법은 수학의 함수문법과 용도가 똑같습니다

숫자를 집어넣으면 규칙에 따라 다른 숫자가 나오는 변환기역할을 합니다. 
무슨 이차함수 공식외우고 그게 중요한게 아니라
함수는 그냥 x 집어넣으면 x + 2 나오는 변환기역할을 하는 수식입니다.

프로그래밍에서의 함수도 마찬가지로 
자료를 집어넣으면 규칙에 따라 다른 자료가 나오는 변환기 역할을 할 수 있습니다.
변환기 만들 때 return 문법이 유용하게 사용
 -------------------------------------
문자->문자 변환기
그거 말고도 숫자를 넣으면 3의 배수 여부를 true/false로 뱉는 함수(숫자->true/false)
문자를 넣으면 a가 몇개 들어있는지 뱉는 함수 
그런 식의 변환기 만들어쓰고 싶으면 return 문법 쓰면 됩니다
 -------------------------------------
※소수점 있는 숫자 연산시 주의점!
컴퓨터는 2진법으로 설계되어있습니다.그래서 숫자도 2진법 숫자만 알아들을 수 있습니다. 
컴퓨터에게 10 + 20 연산하라고 하면
전부 2진법으로 바꿔서 1010 + 10100 으로 연산하고 다시 10진법으로 바꿔서 보여줍니다. 

근데 2진법의 문제가 있는데 
1.1 이런 숫자는 2진법으로 바꾸면
1.00011001100110011001100 ...
무한히 반복됩니다.

이 세상엔 무한한 숫자를 저장할 수 있는 저장장치는 없기 때문에
컴퓨터는 적절히 끊고 반올림해서 저장합니다.
1.00011001100110011001101
이런 식입니다. 그래서 소수점 연산은 아주 작은 오차가 발생합니다.

해결하고 싶으면
1. 덧셈하기 전에 10 곱해서 덧셈하고 10으로 나누든가 
2. 외부라이브러리 쓰든가 
3. 오차는 무시할 정도로 작으니 그냥 반올림하든가 
하면 됩니다. 아주 정확한 계산이 필요한게 아니면 대부분 그냥 반올림하면 됩니다.
 -------------------------------------
★★소수점 몇자리까지 반올림?
숫자.toFixed(몇자리); 
var num = (a * 1.1 ).toFixed();

자바스크립트 + 연산자 특징
'문자' + 123 => '문자123'
'문자'+'문자' => '문자문자'

★★문자를 숫자로 변화
parseFloat('123')
parseInt('123') 

오늘의 교훈:
1. 함수로 자료변환기 제작 가능
2. 숫자 연산시 주의점
---------------------------------------
숙제1)함수에 분과 초를 차례로 파라미터로 입력하면 ms단위로 바꿔서 뱉어주는 함수를 만들어봅시다.
(1초 == 1000ms 입니다)
(동작예시)

console.log(함수(1,30))
이렇게 사용하면 콘솔창에 90000이 출력되어야합니다
(90초인데 x 1000 하면 90000)

console.log(함수(2,10))
이렇게 사용하면 콘솔창에 130000이 출력되어야합니다
(130초인데 x 1000 하면 130000)

★★정답=
function 함수(a, b){
  var result = (a * 60 + b) * 1000;
  return result
}
---------------------------------------
숙제2)가격을 파라미터로 입력하면 10% 할인가를 뱉는 함수를 만들어봅시다.
근데 첫 구매여부도 true/false로 둘째파라미터에 입력해서 첫 구매가 맞을 경우 추가로 1.5 달러도 할인해줘야합니다. 
주의사항은 가격으로 10.3 이런거 넣으면 뒤에 소수점 길게 나올 수도 있으니 알아서 처리해보든가 합시다

(동작예시)
console.log(함수(70, false))
이렇게 사용하면 콘솔창에 63이 출력되어야합니다
(70의 10% 할인가격이고 추가할인 없음)

console.log(함수(10, true))
이렇게 사용하면 콘솔창에 7.5가 출력되어야합니다
(10의 10% 할인가격 9에 추가할인 1.5 해줌)

★★정답=
function 함수(a, b){
  var result = a * 0.9;
  if (b == true) {
    result = result - 1.5;
  }
  return result
}
근데 함수(10.3, true) 이런거 하면 소수점이 길게 나오기 때문에 반올림해서 결과를 보여주는 것도 좋겠군요
return parseFloat(result.toFixed(2)) 
